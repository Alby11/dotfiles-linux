# vim: filetype=zsh

if [ -f ${HOME}/.bootstrapped ] || [ $SHLVL -gt 2 ]; then
  return 1
fi

# Function to filter exclusions
filter_exclusions() {
  local packages=("${(@)1}") # Original package array
  local exclusions=("${(@)2}") # Exclusions array
  local filtered=()

  for pkg in "${packages[@]}"; do
    if [[ ! "${exclusions[(ie)$pkg]}" -le "${#exclusions}" ]]; then
      filtered+=("$pkg")
    fi
  done

  echo "${filtered[@]}"
}

# Function to check for NOPASSWD privileges
check_nopasswd() {
  local sudo_output=$(SUDO_ASKPASS=/bin/false sudo -ln 2>/dev/null)
  if [[ $sudo_output == *"(ALL) NOPASSWD: ALL"* ]] || [[ $sudo_output == *"NOPASSWD:"* ]]; then
      return 0
  else
      return 1
  fi
}

# If the user does not have NOPASSWD privileges, set SUDO_ASKPASS
if ! check_nopasswd; then
  export SUDO_ASKPASS=$(which ssh-askpass)
  sudo -v
fi

#PACKAGE MANAGER
[[ $(command -v dnf) ]] && has_dnf=1
[[ $(command -v apt) ]] && has_apt=1
[[ $(command -v pacman) ]] && has_pacman=1

# Define common packages (those with the same name on both Fedora and Ubuntu)
common_packages=(
    "bat"
    "btop"
    "curl"
    "fzf"
    "gnome-tweaks"
    "gnupg2"
    "htop"
    "keychain"
    "python3-pip"
    "ripgrep"
    "shellcheck"
    "shfmt"
    "wl-clipboard"
    "xclip"
    "zoxide"
)

common_exclusions=(
  "gnome-tweaks"
  "wl-clipboard"
  "xclip"
)

# Define Fedora-specific packages and Ubuntu-specific packages
fedora_packages=(
    "ccze"
    "chafa"
    "clang"
    "fd-find"
    "libcurl-devel"
    "libnotify"
    "libwnck3"
    "lsb_release"
    "luarocks"
    "perl-Image-ExifTool"
    "xorg-x11-server-Xwayland"
    "xsel"
)

fedora_exclusions=(
  "xorg-x11-server-Xwayland"
  "xsel"
)

ubuntu_packages=(
    "clang-format"
    "exa"
    "gir1.2-wnck-3.0"
    "libimage-exiftool-perl"
    "libnotify-bin"
    "lsb-release"
    "xsel"
    "xwayland"
)

ubuntu_exclusions=(
  "xsel"
  "xwayland"
)

arch_packages=(
    "bat"
    "btop"
    "curl"
    "exa"
    "fzf"
    "gnome-tweaks"
    "gnupg"
    "htop"
    "keychain"
    "perl-image-exiftool"
    "python-pip"
    "ripgrep"
    "shellcheck"
    "shfmt"
    "wl-clipboard-x11"
    "xclip"
    "xsel"
    "zoxide"
)

arch_exclusions=(
  "gnome-tweaks"
  "wl-clipboard-x11"
  "xclip"
  "xsel"
)

# Define cargo packages (those with the same name on both Fedora and Ubuntu)
cargo_packages=(
  "fnm"
  "gitui"
  "grc-rs"
  "lolcrab"
  "rbw"
  "vivid"
)

cargo_exclusions=(
  "gitui"
  "lolcrab"
  "rbw"
)

# Define npm packages (those with the same name on both Fedora and Ubuntu)
npm_packages=(
  "@fsouza/prettierd"
  "eslint"
  "fixjson"
  "neovim"
  "solhint"
)

npm_exclusions=()

# Define pip packages (those with the same name on both Fedora and Ubuntu)
pip_packages=(
  "autoenv"
  "black"
  "flake8"
  "openai"
  "pynvim"
  "thefuck"
  "virtualenv"
  "virtualenvwrapper"
)

pip_exclusions=(
  "openai"
)

echo $common_packages
echo $cargo_packages
echo $pip_packages
# Check for SSH connection and filter packages if necessary
if [[ -n "$SSH_CONNECTION" ]]; then
  common_packages=($(filter_exclusions $common_packages $common_exclusions))
  fedora_packages=($(filter_exclusions $fedora_packages $fedora_exclusions))
  ubuntu_packages=($(filter_exclusions $ubuntu_packages $ubuntu_exclusions))
  arch_packages=($(filter_exclusions $arch_packages $arch_exclusions))
  cargo_packages=($(filter_exclusions $cargo_packages $cargo_exclusions))
  npm_packages=($(filter_exclusions $npm_packages $npm_exclusions))
  pip_packages=($(filter_exclusions $pip_packages $pip_exclusions))
  echo $common_packages
  echo $cargo_packages
  echo $pip_packages
  return 0
fi

# Install packages based on the available package manager
if [[ $has_dnf ]]; then
    sudo dnf install -y "${common_packages[@]}" "${fedora_packages[@]}"
elif [[ $has_apt ]]; then
    export DEBIAN_FRONTEND=noninteractive
    if ! find /var/lib/apt/periodic/update-success-stamp -mtime -1 &>/dev/null; then
        sudo apt-get update
    fi
    sudo apt-get install -y "${common_packages[@]}" "${ubuntu_packages[@]}"
    unset DEBIAN_FRONTEND
elif [[ $has_pacman ]]; then
    sudo pacman -Syu --noconfirm "${arch_packages[@]}"
fi

# Cargo
if ! command -v rustup &>/dev/null; then
  curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- --no-modify-path
fi
for package in "${cargo_packages[@]}"; do
  cargo install "$package"
done

# NPM
if ! command -v npm &>/dev/null; then
  if command -v fnm &>/dev/null; then
    fnm install --lts
  fi
fi
for package in "${npm_packages[@]}"; do
  if ! npm list -g "$package" >/dev/null 2>&1; then
    npm install -g "$package"
  fi
done

# PIP
for package in "${pip_packages[@]}"; do
  python -m pip install --user "$package"
done

# Git raw (if needed)
# Add any commands to install raw Git repositories or other software not available via package managers

# Mark the system as bootstrapped
date > "${HOME}/.bootstrapped"

# Clean up
unset has_apt has_dnf
