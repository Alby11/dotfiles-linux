#!/usr/bin/env zsh

# Usage: pastesio [create|get|delete] [args...]
# - create: Create a new paste
#   - Usage: pastesio create "content" "title" "format" "expiration"
#     - content: The content of the paste. This is a mandatory parameter.
#     - title: The title of the paste. This is an optional parameter.
#     - format: The syntax highlighting for the paste (e.g., "bash", "python", etc.). This is an optional parameter.
#     - expiration: When the paste should expire ("10m", "1h", etc.). This is an optional parameter.
# - get: Retrieve an existing paste
#   - Usage: pastesio get paste_id
#     - paste_id: The ID of the paste you want to retrieve. This is a mandatory parameter.
# - delete: Delete an existing paste
#   - Usage: pastesio delete paste_id
#     - paste_id: The ID of the paste you want to delete. This is a mandatory parameter.

pastesio() {

  if [[ "$1" == "-h" || "$1" == "--help" || -z "$1" ]]; then
    echo "Usage: pastesio [create|get|delete] [args...]"
    echo "- create: Create a new paste"
    echo "  - Usage: pastesio create \"content\" \"title\" \"format\" \"expiration\""
    echo "    - content: The content of the paste. This is a mandatory parameter."
    echo "    - title: The title of the paste. This is an optional parameter."
    echo "    - format: The syntax highlighting for the paste (e.g., \"bash\", \"python\", etc.). This is an optional parameter."
    echo "    - expiration: When the paste should expire (\"10m\", \"1h\", etc.). This is an optional parameter."
    echo "- get: Retrieve an existing paste"
    echo "  - Usage: pastesio get paste_id"
    echo "    - paste_id: The ID of the paste you want to retrieve. This is a mandatory parameter."
    echo "- delete: Delete an existing paste"
    echo "  - Usage: pastesio delete paste_id"
    echo "    - paste_id: The ID of the paste you want to delete. This is a mandatory parameter."
    return 0
  fi

  local history_file="$ZDOTDIR/.pastesio_history"

  # Authenticate and get the bearer token
  local username="$PASTES_IO_USER"
  local password="$PASTES_IO_PASS"

  # Define the request
  local request="curl --location --request POST 'https://pastes.io/api/login' \
      --header 'Accept: application/json' \
      --form 'username=\"$username\"' \
      --form 'password=\"$password\"'"

  echo $request
  # Execute the request and get the response
  local response=$(eval "$request")

  echo $response

  # Extract the bearer token from the response
  local bearer_token=$(echo "$response" | grep -oP '"api_token":"\K[^"]+')

  local command="$1"

  case "$command" in
    create)
      local content="$2"
      local title="$3"
      local syntax="$4"
      local password="$5"
      local status="$6"
      local expire="$7"
      echo $status
      # Define the request
      local request="curl --location --request POST 'https://pastes.io/api/paste/create' \
          --header 'Accept: application/json' \
          --header \"Authorization: Bearer $bearer_token\" \
          --form \"content=\"$content\"\" \
          --form \"status=\"$status\"\" \
          --form \"expire=\"$expire\"\" \
          --form \"title=\"$title\"\" \
          --form \"syntax=\"$syntax\"\" \
          --form \"password=\"$password\"\""

      echo $request

      # Execute the request and get the response
      local response=$(eval "$request")

      # Print the response
      echo $response

      # Extract the paste ID from the response and add it to the history file
      local paste_id=$(echo "$response" | grep -oP '"slug": "\K[^"]+')
      echo "$paste_id" >> "$history_file"
      ;;

    get)
      local slug="$2"
      local password="$3"

      # Define the request
      local request="curl --location --request POST \"https://pastes.io/api/pastes/$slug\" \
          --header 'Accept: application/json' \
          --header \"Authorization: Bearer $bearer_token\" \
          --form \"password=\"$password\"\""

      # Execute the request and get the response
      local response=$(eval "$request")

      # Add the retrieved paste slug to the history file
      echo "$slug" >> "$history_file"
      ;;
    delete)
      local slug="$2"

      # Define the request
      local request="curl --location --request POST \"https://pastes.io/api/paste/delete\" \
          --header 'Accept: application/json' \
          --header \"Authorization: Bearer $bearer_token\" \
          --form \"slug=\"$slug\"\""

      # Execute the request and get the response
      local response=$(eval "$request")


      # Remove the deleted paste slug from the history file
      sed -i "/$slug/d" "$history_file"
      ;;
    mypastes)

      # Define the request
      local request="curl --location --request GET 'https://pastes.io/api/my-pastes' \
          --header 'Accept: application/json' \
          --header \"Authorization: Bearer $bearer_token\""

      # Execute the request and get the response
      local response=$(eval "$request")

      ;;
    deleteall)
      # First, get all of your pastes
      # Define the request
      local request="curl --location --request GET 'https://pastes.io/api/my-pastes' \
          --header 'Accept: application/json' \
          --header \"Authorization: Bearer $bearer_token\""

      # Get the response
      local response=$(eval "$request")

      # Extract all the slugs from the response
      local slugs=$(echo "$response" | grep -oP '"slug": "\K[^"]+')

      # Loop over each slug and delete the corresponding paste
      for slug in $slugs; do
        curl --location --request POST "https://pastes.io/api/paste/delete" \
          --header 'Accept: application/json' \
          --header "Authorization: Bearer $bearer_token" \
          --form "slug=\"$slug\""

        # Remove the deleted paste slug from the history file
        sed -i "/$slug/d" "$history_file"
      done
      ;;
  esac
}

# Add this to your .zshrc file for tab completion for the pastesio command and paste IDs
compdef '_values "commands" create get delete' pastesio

# autoload -Uz compinit && compinit

_pastesio() {
  local curcontext="$curcontext" state line expl ret=1
  typeset -A opt_args

  _arguments -C \
    '1: :->cmds' \
    '*:: :->args' && ret=0

  case $state in
    cmds)
      case $line[1] in
        get|delete)
          _arguments '2: :_pastesio_paste_ids'
          ret=0
          ;;
        *)
          _files
          ret=0
          ;;
      esac
      ;;
    args)
      case $line[1] in
        get|delete)
          _arguments '2: :_pastesio_paste_ids'
          ret=0
          ;;
        *)
          _files
          ret=0
          ;;
      esac
      ;;
  esac

  return ret
}

_pastesio_paste_ids() {
  local history_file="$ZDOTDIR/.pastesio_history"

  if [[ ! -f "$history_file" ]]; then return; fi

  compadd $(cat "$history_file")
}

compdef _pastesio pastesio
