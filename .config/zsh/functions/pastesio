#!/usr/bin/env zsh

# Usage: pastesio [create|get|delete] [args...]
# - create: Create a new paste
#   - Usage: pastesio create "content" "title" "format" "expiration"
#     - content: The content of the paste. This is a mandatory parameter.
#     - title: The title of the paste. This is an optional parameter.
#     - format: The syntax highlighting for the paste (e.g., "bash", "python", etc.). This is an optional parameter.
#     - expiration: When the paste should expire ("10m", "1h", etc.). This is an optional parameter.
# - get: Retrieve an existing paste
#   - Usage: pastesio get paste_id
#     - paste_id: The ID of the paste you want to retrieve. This is a mandatory parameter.
# - delete: Delete an existing paste
#   - Usage: pastesio delete paste_id
#     - paste_id: The ID of the paste you want to delete. This is a mandatory parameter.

pastesio() {
  local history_file="$ZDOTDIR/.pastesio_history"
  local username="$PASTES_IO_USER"
  local password="$PASTES_IO_PASS"
  local command="$1"

  # Authenticate and get the bearer token
  local request="curl --location --request POST 'https://pastes.io/api/login' \\
      --header 'Accept: application/json' \\
      --form 'username=\"$username\"' \\
      --form 'password=\"$password\"'"

  local response=$(eval "$request")

  local bearer_token=$(echo "$response" | jq -r '.success.api_token')

  case "$command" in
create)
  local pastesio_status expire title syntax slug_password
  local form_data=("status=2")  # Default to public

  # Capture all arguments after the command
  local args=("$@")

  # Shift the command itself and process the remaining arguments
  shift

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -c) content="$2"; shift 2 ;;
      -s) pastesio_status="$2"; shift 2 ;;
      -e) expire="$2"; shift 2 ;;
      -t) title="$2"; shift 2 ;;
      -y) syntax="$2"; shift 2 ;;
      -p) slug_password="$2"; shift 2 ;;
      *) echo "Invalid option or argument: $1" >&2; return 1 ;;
    esac
  done

  # Check for required content
  if [ -z "$content" ]; then
    echo "Content is required for creating a paste." >&2
    return 1
  fi

  # Add optional parameters to the form data
  if [ -n "$pastesio_status" ]; then
    form_data=("status=\"$pastesio_status\"")
  fi

  if [ -n "$expire" ]; then
    form_data+=("expire=\"$expire\"")
  fi

  if [ -n "$title" ]; then
    form_data+=("title=\"$title\"")
  fi

  if [ -n "$syntax" ]; then
    form_data+=("syntax=\"$syntax\"")
  fi

  if [ -n "$slug_password" ]; then
    form_data+=("password=\"$slug_password\"")
  fi

  # Construct the request with form data
  local request=("curl" "--location" "--request" "POST" "https://pastes.io/api/paste/create")
  
  for data in "${form_data[@]}"; do
    request+=("--form" "$data")
  done

  request+=("--form" "content=\"$content\"")

  # Add headers
  request+=("--header" "\"Accept: application/json\"")
  request+=("--header" "\"Authorization: Bearer $bearer_token\"")

  # Execute the request and get the response
  local response
  response=$(bash -c "${request}")

  # Extract the paste URL
  local paste_url
  paste_url=$(echo "$response" | jq -r '.success.paste_url')
  echo $paste_url
  if [ -z "$paste_url" ] || [ "$paste_url" = "null" ]; then
    echo "Failed to create the paste." >&2
    return 1
  fi

  # Print the paste URL
  echo "Paste URL: $paste_url"

  # Extract the paste ID from the response and add it to the history file
  local paste_id
  paste_id=$(echo "$response" | jq -r '.success.slug')
  echo "$paste_id" >> "$history_file"
  ;;
    get)
      local slug="$2"
      local password="${3:-}"

      # Define the request
      local request="curl --location --request POST \"https://pastes.io/api/pastes/$slug\" \
          --header 'Accept: application/json' \
          --header \"Authorization: Bearer $bearer_token\" \
          --form \"password=\"$password\"\""

      # Execute the request and get the response
      local response=$(eval "$request")

      # Add the retrieved paste slug to the history file
      echo "$slug" >> "$history_file"
      ;;

   delete)
     local slug="$2"

     # Define the request
     local request="curl --location --request POST \"https://pastes.io/api/paste/delete\" \
         --header 'Accept: application/json' \
         --header \"Authorization: Bearer $bearer_token\" \
         --form \"slug=\"$slug\"\""

     # Execute the request and get the response
     local response=$(eval "$request")

     # Remove the deleted paste slug from the history file
     sed -i "/$slug/d" "$history_file"
     ;;

   mypastes)

     # Define the request
     local request="curl --location --request GET 'https://pastes.io/api/my-pastes' \
         --header 'Accept: application/json' \
         --header \"Authorization: Bearer $bearer_token\""

     # Execute the request and get the response
     local response=$(eval "$request")

     ;;

   deleteall)
     # First, get all of your pastes
     # Define the request
     local request="curl --location --request GET 'https://pastes.io/api/my-pastes' \
         --header 'Accept: application/json' \
         --header \"Authorization: Bearer $bearer_token\""

     # Get the response
     local response=$(eval "$request")

     # Extract all the slugs from the response
     local slugs=$(echo "$response" | grep -oP '"slug": "\K[^"]+')

     # Loop over each slug and delete the corresponding paste
     for slug in $slugs; do
       curl --location --request POST "https://pastes.io/api/paste/delete" \
         --header 'Accept: application/json' \
         --header "Authorization: Bearer $bearer_token" \
         --form "slug=\"$slug\""

       # Remove the deleted paste slug from the history file
       sed -i "/$slug/d" "$history_file"
     done
     ;;
 esac
}

# Completion script for the pastesio function
_complete_pastesio() {
  local cur prev opts
  COMPREPLY=()
  cur="${COMP_WORDS[COMP_CWORD]}"
  prev="${COMP_WORDS[COMP_CWORD-1]}"
  opts="-c -s -e -t -y -p"

  if [[ ${cur} == -* ]]; then
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    return 0
  fi
}

complete -F _complete_pastesio pastesio
