#!/usr/bin/env bash

# Check if rg is installed, if not use grep and print a warning
if ! command -v rg &> /dev/null
then
    echo "rg could not be found, using grep instead"
    SEARCH_CMD="grep -r"
else
    SEARCH_CMD="rg"
fi

fzf-rg-edit() {
  # Check for required commands
  for cmd in fzf $SEARCH_CMD; do
    if ! command -v $cmd &> /dev/null; then
      echo "Error: Required command '$cmd' not found. Please install it and try again."
      exit 1
    fi
  done

  # Parse options
  local OPTIND opt i f path="."
  while getopts "iFh" opt; do
    case ${opt} in
      i ) i="-i" ;;
      F ) f="-F" ;;
      h ) echo "Usage: fzf-rg-edit [-i] [-F] [path]"
          echo "  -i: Case insensitive search"
          echo "  -F: Fixed string search"
          echo "  path: Directory to start search from (default is current directory)"
          return ;;
      \? ) echo "Invalid Option: -$OPTARG" 1>&2; return ;;
    esac
  done
  shift $((OPTIND -1))

  # If a path is provided, use it as the starting point for the search
  if [[ $# -gt 0 ]]; then path="$1"; fi

  # Use fzf with rg to search for the pattern in all files (even hidden) starting from the current directory, recursively.
  # When a file is selected with enter in fzf, it opens the file in the default editor.
  local file=$(find "$path" -type f | $SEARCH_CMD $i $f "$(fzf --print-query)" | awk -F: '{print $1}' | sort -u | fzf)
  
  if [[ -n "$file" ]]; then
    ${EDITOR:-vi} "$file"
  fi
}

# Call the function with all provided arguments
fzf-rg-edit "$@"
