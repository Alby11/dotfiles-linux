# vim: filetype=zsh

build_and_install_neovim() {
  # Check if a local Neovim installation exists
  if [[ -x "$HOME/.local/bin/nvim" ]]; then
    echo "Local Neovim installation found. Skipping build and install."
    return 0
  fi

  # Detects the Linux distribution and installs necessary build dependencies
  local DISTRO
  if [[ -f /etc/fedora-release ]]; then
    DISTRO="fedora"
    echo "Installing build dependencies for Fedora..."
    sudo dnf install -y ninja-build gettext libtool libtool-ltdl-devel \
      autoconf automake cmake gcc gcc-c++ make pkgconfig unzip patch \
      curl
  elif [[ -f /etc/os-release ]]; then
    . /etc/os-release
    if [[ $NAME == "Ubuntu" ]]; then
      DISTRO="ubuntu"
      echo "Installing build dependencies for Ubuntu..."
      sudo apt update && sudo apt install -y ninja-build gettext libtool libtool-bin \
        autoconf automake cmake g++ pkg-config unzip curl doxygen
    elif [[ $ID == "arch" || $ID_LIKE == "arch" ]]; then
      DISTRO="arch"
      echo "Installing build dependencies for Arch Linux..."
      sudo pacman -Sy --needed base-devel cmake unzip ninja tree-sitter curl doxygen
    fi
  else
    echo "Unsupported distribution. Exiting..."
    return 1
  fi

  # Clone, build, and install Neovim from source for the current user
  echo "Cloning Neovim repository..."
  git clone https://github.com/neovim/neovim.git || { echo "Failed to clone Neovim repository"; return 1; }
  cd neovim || return 1
  echo "Building Neovim from source..."
  make CMAKE_BUILD_TYPE=RelWithDebInfo || { echo "Failed to build Neovim"; return 1; }
  echo "Installing Neovim for the current user..."
  make CMAKE_INSTALL_PREFIX="$HOME/.local" install
  cd ..
  echo "Removing cloned Neovim repository..."
  rm -rf neovim

  # Ensure $HOME/.local/bin is in PATH
  if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    echo "Adding $HOME/.local/bin to your PATH for this session."
    export PATH="$HOME/.local/bin:$PATH"
  fi
}
