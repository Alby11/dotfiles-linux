# vim: filetype=zsh
pwssh() {
  # Prompt for user and server
  local credentialUser=${1}
  local remoteServer=${2}

  # Securely prompt for the password
  # echo -n "Enter password: "
  local passwordPlainText=""
  echo -n "Enter password:"
  stty sane
  stty icrnl
  read -s passwordPlainText

  # Define the script content
    # \$credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList ('${credentialUser}', (ConvertTo-SecureString '${password}' -AsPlainText -Force))
  local scriptContent="
    # Convert the plaintext password to a secure string
    \$securePassword = ConvertTo-SecureString \""${passwordPlainText}"\"-AsPlainText -Force # Create the credential object
    \$Credential = New-Object System.Management.Automation.PSCredential (\""${credentialUser}"\", \$securePassword)

    function Set-DefaultCredentialForModule {
        param(
            [Parameter(Mandatory=\$true)]
            [string]\$ModuleName,

            [Parameter(Mandatory=\$true)]
            [System.Management.Automation.PSCredential]\$Credential
        )

        # Attempt to import the module in case it's not already loaded
        Import-Module \$ModuleName -ErrorAction SilentlyContinue

        # Get all commands in the specified module
        \$ModuleCmdlets = Get-Command -Module \$ModuleName

        # Loop through each command and set the default Credential parameter
        foreach (\$cmd in \$ModuleCmdlets) {
            # Construct the parameter name string
            \$paramName = \$cmd.Name + ':Credential'

            # Check if the cmdlet has a Credential parameter
            \$cmdParameters = Get-Command \$cmd.Name | Select-Object -ExpandProperty Parameters
            if (\$cmdParameters.ContainsKey('Credential')) {
                # Set the default Credential parameter for the cmdlet
                \$PSDefaultParameterValues[\$paramName] = \$Credential
            }
        }
    }

    # Define an array of modules
    \$ModuleList = @(
      'ActiveDirectory'
    )

    # Loop through each module and set the default Credential parameter
    foreach (\$Module in \$ModuleList) {
      Set-DefaultCredentialForModule -ModuleName \$Module -Credential \$Credential
    }

    # Set a Credential shorthand for manual use
    \$crd = \$Credential

    # Any other PowerShell commands here
    Remove-Item -Path \$MyInvocation.MyCommand.Path -Force
  "
  unset passwordPlainText

  # Define the remote script path
  local localScriptPath="/tmp/pwsh_script.ps1"
  local remoteScriptPath="~"

  # Create the script file locally
  echo $scriptContent > $localScriptPath

  # Transfer the script to the remote server
  scp $localScriptPath ${credentialUser}@${remoteServer}:${remoteScriptPath}

  # Clean up the local script
  rm -v $localScriptPath

  # Instructions to execute the script remotely upon login
  echo "To run the PowerShell script, log in to the remote server and execute:"
  echo "pwsh -File ${remoteScriptPath}\/pwsh_script.ps1"
  echo "The script will automatically delete itself after execution."
  ssh -t $remoteServer "pwsh -NoExit -Command '. ${remoteScriptPath}/pwsh_script.ps1 ; Remove-Item ${remoteScriptPath}/pwsh_script.ps1 -Force -Verbose'"
  ssh $remoteServer rm -v ${remoteScriptPath}/pwsh_script.ps1
}

