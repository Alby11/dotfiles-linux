# vim: filetype=zsh

#
# .zeditor - Zsh file loaded to export editor, visual, pager ...
#

ECHOCAT '.zeditor - Zsh file loaded to export editor, visual, pager ...'

#
# Editors
#

# define a function to build neovim from source if neovim is missing
# in case it is installed by package manager, build for current user only
build_and_install_neovim() {
  # Check if a local Neovim installation exists
  if [ -x "$HOME/.local/bin/nvim" ]; then
    echo "Local Neovim installation found. Skipping build and install."
    return 0
  fi

  if [ ! -d "$(antidote path neovim/neovim)" ]; then
    echo "Neovim sources not present, check dotfiles. Exiting..."
    return 1
  fi

  # Detects the Linux distribution and installs necessary build dependencies
  if [ $DISTRO = "fedora" ]; then
    echo "Installing build dependencies for Fedora..."
    sudo dnf install -y ninja-build gettext libtool libtool-ltdl-devel \
      autoconf automake cmake gcc gcc-c++ make pkgconfig unzip patch \
      curl
  elif [ $DISTRO = "ubuntu" ]; then
    echo "Installing build dependencies for Ubuntu..."
    sudo apt update && sudo apt install -y ninja-build gettext libtool libtool-bin \
      autoconf automake cmake g++ pkg-config unzip curl doxygen
  elif [ $DISTRO = "arch" ]; then
    echo "Installing build dependencies for Arch Linux..."
    sudo pacman -Sy --needed base-devel cmake unzip ninja tree-sitter curl doxygen
  else
    echo "Unsupported distribution. Exiting..."
    return 1
  fi

  # Clone, build, and install Neovim from source for the current user
  cd "$(antidote path neovim/neovim)"
  echo "Building Neovim from source..."
  make CMAKE_BUILD_TYPE=RelWithDebInfo || { echo "Failed to build Neovim"; return 1; }
  echo "Installing Neovim for the current user..."
  make CMAKE_INSTALL_PREFIX="$HOME/.local" install
  cd $HOME

  # Ensure $HOME/.local/bin is in PATH
  if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    echo "Adding $HOME/.local/bin to your PATH for this session."
    export PATH="$HOME/.local/bin:$PATH"
  fi
}

# define a function to install bat and its extras
install_and_setup_bat() {
  if ! CHECK_COMMANDS bat && ! CHECK_COMMANDS batcat; then
    package_manager_install bat
  fi
  # Check if running on Ubuntu
  if [ $DISTRO = "ubuntu" ]; then
    # Check if batcat is installed (Ubuntu's bat package name)
    if command -v batcat > /dev/null; then
      alias bat='batcat'
      # Only alias cat to rcat if rcat is not already an existing command
      if ! command -v rcat > /dev/null; then
        alias rcat='cat'
      fi
      alias cat='rcat'
    fi
  fi

  # Integration with fzf for preview
  if command -v fzf > /dev/null; then
    # export FZF_DEFAULT_OPTS="--preview 'bat --color=always --style=numbers --line-range=:500 {}'"
    alias fzfbat='fzf --preview "bat --color=always --style=numbers --line-range=:500 {}"'
  fi

  # Integration with find or fd for previewing files
  alias findbat='find | xargs -exec bat {} +'
  if command -v fd-find > /dev/null; then
    alias fd='fd-find'
  fi
  if command -v fd > /dev/null; then
    alias fdbat='fd | xargs -X bat'
  fi

  # Integration with tail -f for continuous monitoring
  tailbat() {
    tail -f  | xargs bat --paging=never -l log
  }

  # Integration with git for showing files with syntax highlighting
  gitbat() {
    git show | xargs bat -l -rs
  }
  alias BGS='| bat -l rs' # mnemonic Bat Git Show

  # combine bat with git diff to view lines around code changes with proper syntax highlighting:
  batdiff() {
      git diff --name-only --relative --diff-filter=d | xargs bat --diff
  }

  # Integration with xclip for copying contents without line numbers or Git markers
  alias batclip='bat --plain | xclip'
  alias batwlcopy='bat --plain | wl-copy'

  # Alias for highlighting --help messages
  alias bathelp='bat --plain --language=help'
  help() {
      "$@" --help 2>&1 | bathelp
  }

  bat cache --build > /dev/null 2>&1

  if command -v batpipe &> /dev/null; then
    export LESSOPEN="$(which batpipe) %s"
    # The following will enable colors when using batpipe with less:
    export BATPIPE="color"
  fi

  # Set bat as MANPAGER for colorized man pages
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"
  # Check for MANROFFOPT for better formatting
  export MANROFFOPT="-c"

}

export EDITOR="$(which nano > /dev/null 2>&1)"
export VISUAL="$EDITOR"
export PAGER="$(which less)"
export MANPAGER="$PAGER"

### Setting up less
# Highlight section titles in manual pages.
export LESS_TERMCAP_md="${yellow}"
unset LESSCLOSE
export LESS=" -R"

install_and_setup_bat

# Neovim build from source
[[ ! -f $HOME/.local/bin/nvim ]] && build_and_install_neovim

# LunarVIM
if ! CHECK_COMMANDS lvim; then
  rm -rfv $HOME/.local/share/*vim \
    $HOME/.config/*nvim \
    $HOME/.cache/*nvim
  bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/uninstall.sh)
  bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh)
fi

if CHECK_COMMANDS lvim; then
  export EDITOR="${$(which lvim):-$EDITOR}"
  export VISUAL="${$(which lvim):-$VISUAL}"
  export PAGER="${$(which lvim):-$PAGER}"
  export MANPAGER="$(which lvim) -c 'Man!' -o -"
else
  export EDITOR="${$(which nvim):-$EDITOR}"
  export VISUAL="${$(which nvim):-$VISUAL}"
  export PAGER="${$(which nvim):-$PAGER}"
  export MANPAGER="$(which nvim) -c 'Man!' -o -"
fi
