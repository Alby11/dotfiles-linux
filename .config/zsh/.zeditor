# vim: filetype=zsh

#
# .zeditor - Zsh file loaded to export editor, visual, pager ...
#

ECHOCAT '.zeditor - Zsh file loaded to export editor, visual, pager ...'

#
# Editors
#

export EDITOR
export VISUAL
export PAGER
export MANPAGER
export LESS
export LESS_TERMCAP_md
export LESSOPEN
export LESSCLOSE
export PATH

# define a function to build neovim from source if neovim is missing
# in case it is installed by package manager, build for current user only
build_and_install_neovim() {
  # Check if a local Neovim installation exists
  if [ -x "$HOME/.local/bin/nvim" ]; then
    echo "Local Neovim installation found. Skipping build and install."
    return 0
  fi

  if [ ! -d "$(antidote path neovim/neovim)" ]; then
    echo "Neovim sources not present, check dotfiles. Exiting..."
    return 1
  fi

  # Detects the Linux distribution and installs necessary build dependencies
  if [ "$DISTRO" = "fedora" ]; then
    echo "Installing build dependencies for Fedora..."
    sudo dnf install -y ninja-build gettext libtool libtool-ltdl-devel \
      autoconf automake cmake gcc gcc-c++ make pkgconfig unzip patch \
      curl
  elif [ "$DISTRO" = "ubuntu" ]; then
    echo "Installing build dependencies for Ubuntu..."
    sudo apt update && sudo apt install -y ninja-build gettext libtool libtool-bin \
      autoconf automake cmake g++ pkg-config unzip curl doxygen
  elif [ "$DISTRO" = "arch" ]; then
    echo "Installing build dependencies for Arch Linux..."
    sudo pacman -Sy --needed base-devel cmake unzip ninja tree-sitter curl doxygen
  else
    echo "Unsupported distribution. Exiting..."
    return 1
  fi

  # Clone, build, and install Neovim from source for the current user
  cd "$(antidote path neovim/neovim)" || return 1
  echo "Building Neovim from source..."
  local INST_DIR="$HOME/.local"
  make CMAKE_BUILD_TYPE=RelWithDebInfo || { echo "Failed to build Neovim"; return 1; }
  echo "Installing Neovim for the current user..."
  make CMAKE_INSTALL_PREFIX="$HOME/.local" install
  cd "$HOME" || cd ..

  # Ensure $HOME/.local/bin is in PATH
  if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    echo "Adding $HOME/.local/bin to your PATH for this session."
    PATH="$HOME/.local/bin:$PATH"
  fi
}

build_and_install_vim() {
  # Check if a local Neovim installation exists
  if [ -x "$HOME/.local/bin/vim" ]; then
    echo "Local Vim installation found. Skipping build and install."
    return 0
  fi

  if [ ! -d "$(antidote path vim/vim)" ]; then
    echo "Vim sources not present, check dotfiles. Exiting..."
    return 1
  fi

# Install necessary build dependencies based on distribution
  if [[ "$DISTRO" == "fedora" ]]; then
    echo "Installing build dependencies for Fedora..."
    sudo dnf install -y ncurses-devel ruby ruby-devel lua lua-devel luajit \
        luajit-devel ctags git python python-devel \
        python3 python3-devel tcl-devel \
        perl perl-devel perl-ExtUtils-ParseXS \
        perl-ExtUtils-XSpp perl-ExtUtils-CBuilder \
        perl-ExtUtils-Embed \
        ;
    elif [[ "$DISTRO" == "ubuntu" ]]; then
    echo "Installing build dependencies for Ubuntu..."
    sudo apt update && sudo apt install libncurses5-dev libgtk2.0-dev libatk1.0-dev \
        libcairo2-dev libx11-dev libxpm-dev libxt-dev python2-dev \
        python3-dev ruby-dev lua5.2 liblua5.2-dev libperl-dev git \
        ;
    elif [[ "$DISTRO" == "arch" ]]; then
    echo "Installing build dependencies for Arch Linux..."
    sudo pacman -Sy --needed base-devel cmake unzip ninja tree-sitter curl doxygen ncurses
  else
    echo "Unsupported distribution: $DISTRO. Exiting..."
    return 1
  fi

  # Clone, build, and install Neovim from source for the current user
  cd "$(antidote path vim/vim)" || return 1
  echo "Building Vim from source..."
  local INST_DIR="$HOME/.local"
              # --with-python-config-dir="$(python3-config --configdir)" \
              # --enable-perlinterp \
              # --enable-rubyinterp \
  ./configure --with-features=huge \
              --prefix="$INST_DIR" \
              --enable-multibyte \
              --enable-luainterp \
              --enable-pythoninterp \
              --enable-python3interp \
              --enable-gui=gtk2 \
              --enable-cscope \
              --with-x \
              ;
  echo "Installing Vim for the current user..."
  make && make install || {
    echo "Failed to build and install Vim. Exiting..."
    return 1
  }
  cd "$HOME" || return 1

  # Ensure $HOME/.local/bin is in PATH
  if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    echo "Adding $HOME/.local/bin to your PATH for this session."
    PATH="$HOME/.local/bin:$PATH"
  fi
}


# define a function to install bat and its extras
install_and_setup_bat() {

  export BATPIPE
  export MANROFFOPT

  if ! CHECK_COMMANDS bat && ! CHECK_COMMANDS batcat; then
    package_manager_install bat
  fi

  # Check if running on Ubuntu
  if [ "$DISTRO" = "ubuntu" ]; then
    # Check if batcat is installed (Ubuntu's bat package name)
    if command -v batcat > /dev/null; then
      alias bat='batcat'
      bat () { 
        batcat "$@"
      }
      # Only alias cat to rcat if rcat is not already an existing command
      if ! command -v rcat > /dev/null; then
        rcat () { 
          cat "$@"
        }
      fi
    fi
  fi

  # Integration with fzf for preview
  if command -v fzf > /dev/null; then
    export FZF_DEFAULT_OPTS="--preview 'bat --color=always --style=numbers --line-range=:500 {}'"
    fzfbat() { 
      fzf --preview "bat --color=always --style=numbers --line-range=:500 {}"
    }
  fi

  # Integration with find or fd for previewing files
  alias findbat='find | xargs -exec bat {} +'
  if command -v fd-find > /dev/null; then
    alias fd='fd-find'
    fd() {
      fd-find "$@"
    }
    fdbat() {
      fd-find "$@" | xargs -X bat
    }
  elif command -v fd > /dev/null; then
    fdbat() {
      fd "$@" | xargs -X bat
    }
  fi

  # Integration with tail -f for continuous monitoring
  function tailbat() {
    tail -f  | xargs bat --paging=never -l log
  }

  # Integration with git for showing files with syntax highlighting
  function gitbat() {
    git show | xargs bat -l -rs
  }
  alias BGS='| bat -l rs' # mnemonic Bat Git Show

  # Integration with xclip for copying contents without line numbers or Git markers
  alias batclip='bat --plain | xclip'
  alias batwlcopy='bat --plain | wl-copy'

  # Alias for highlighting --help messages
  alias bathelp='bat --plain --language=help'

  function help() {
      "$@" --help 2>&1 | bat --plain --language=help
  }

  bat cache --build > /dev/null 2>&1

  if command -v batpipe &> /dev/null; then
    LESSOPEN="$(which batpipe) %s"
    # The following will enable colors when using batpipe with less:
    BATPIPE="color"
  fi

  # Set bat as MANPAGER for colorized man pages
  MANPAGER="sh -c 'col -bx | bat -l man -p'"
  # Check for MANROFFOPT for better formatting

  BATPIPE="color";
  MANROFFOPT="-c"

}

EDITOR="$(which nano > /dev/null 2>&1)"
VISUAL="$EDITOR"
PAGER="$(which less)"
MANPAGER="$PAGER"

### Setting up less
# Highlight section titles in manual pages.
LESS_TERMCAP_md="${yellow}"
unset LESSCLOSE
LESS="$LESS -R"

# install_and_setup_bat

# Neovim build from source
[[ ! -f $HOME/.local/bin/nvim ]] && build_and_install_neovim
# Call the function to build and install Vim
[[ ! -f $HOME/.local/bin/vim ]] && build_and_install_vim

# LunarVIM
if ! CHECK_COMMANDS lvim; then
  rm -rfv "$HOME/.local/share/*lunar*" \
    "$HOME/.config/*nvim" \
    "$HOME/.cache/*nvim" \
    ;
  bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/uninstall.sh)
  bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh)
fi

# SpaceVim
export SPACEVIMDIR
SPACEVIMDIR=${HOME}/.config/SpaceVim.d
[[ ! -d ${XDG_CONFIG_HOME}/SpaceVim ]] && [[ ! -d ${HOME}/SpaceVim ]] && \
    curl -sLf https://spacevim.org/install.sh | zsh \
    ;

if CHECK_COMMANDS lvim; then
  EDITOR="${$(which lvim):-$EDITOR}"
  PAGER="$EDITOR"
  MANPAGER="$EDITOR -c 'Man!' -o -"
elif CHECK_COMMANDS nvim; then
  EDITOR="${$(which nvim):-$EDITOR}"
  PAGER="$EDITOR"
  MANPAGER="$EDITOR -c 'Man!' -o -"
elif CHECK_COMMANDS vim; then
  EDITOR="${$(which vim):-$EDITOR}"
  PAGER="$EDITOR"
  MANPAGER="$EDITOR c 'Man!' -o -"
else
  EDITOR="${$(which vi):-$EDITOR}"
  PAGER="${$(which less):-$PAGER}"
  MANPAGER="$PAGER"
fi
VISUAL="$EDITOR"
 
[[ -n $EDITOR ]] && {
  edit() {
      ${EDITOR:-vim} "$@"
  }
  alias e='edit'
}
