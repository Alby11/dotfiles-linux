# vim: filetype=zsh

#
# .zeditor - Zsh file loaded to export editor, visual, pager ...
#

ECHOCAT '.zeditor - Zsh file loaded to export editor, visual, pager ...'

#
# Editors
#

# define a function to build neovim from source if neovim is missing
# in case it is installed by package manager, build for current user only
build_and_install_neovim() {
  # Check if a local Neovim installation exists
  if [[ -x "$HOME/.local/bin/nvim" ]]; then
    echo "Local Neovim installation found. Skipping build and install."
    return 0
  fi

  # Detects the Linux distribution and installs necessary build dependencies
  local DISTRO
  if [[ -f /etc/fedora-release ]]; then
    DISTRO="fedora"
    echo "Installing build dependencies for Fedora..."
    sudo dnf install -y ninja-build gettext libtool libtool-ltdl-devel \
      autoconf automake cmake gcc gcc-c++ make pkgconfig unzip patch \
      curl
  elif [[ -f /etc/os-release ]]; then
    . /etc/os-release
    if [[ $NAME == "Ubuntu" ]]; then
      DISTRO="ubuntu"
      echo "Installing build dependencies for Ubuntu..."
      sudo apt update && sudo apt install -y ninja-build gettext libtool libtool-bin \
        autoconf automake cmake g++ pkg-config unzip curl doxygen
    elif [[ $ID == "arch" || $ID_LIKE == "arch" ]]; then
      DISTRO="arch"
      echo "Installing build dependencies for Arch Linux..."
      sudo pacman -Sy --needed base-devel cmake unzip ninja tree-sitter curl doxygen
    fi
  else
    echo "Unsupported distribution. Exiting..."
    return 1
  fi

  # Clone, build, and install Neovim from source for the current user
  echo "Cloning Neovim repository..."
  git clone https://github.com/neovim/neovim.git || { echo "Failed to clone Neovim repository"; return 1; }
  cd neovim || return 1
  echo "Building Neovim from source..."
  make CMAKE_BUILD_TYPE=RelWithDebInfo || { echo "Failed to build Neovim"; return 1; }
  echo "Installing Neovim for the current user..."
  make CMAKE_INSTALL_PREFIX="$HOME/.local" install
  cd ..
  echo "Removing cloned Neovim repository..."
  rm -rf neovim

  # Ensure $HOME/.local/bin is in PATH
  if [[ ":$PATH:" != *":$HOME/.local/bin:"* ]]; then
    echo "Adding $HOME/.local/bin to your PATH for this session."
    export PATH="$HOME/.local/bin:$PATH"
  fi
}

export EDITOR="$(which nano > /dev/null 2>&1)"
export VISUAL="$EDITOR"
export PAGER="$(which less)"
export MANPAGER="$PAGER"

### Setting up less
# Highlight section titles in manual pages.
export LESS_TERMCAP_md="${yellow}"
unset LESSCLOSE
export LESS="$LESS -R"


if CHECK_COMMANDS lesspipe.sh; then
  lesspipe.sh | source /dev/stdin
else
  ECHOCAT 'LESSOPEN: lesspipe.sh in not installed or in PATH' -i
fi

install_and_setup_bat() {
  ### BAT
  if ! CHECK_COMMANDS bat; then
    package_manager_install bat
  fi
  # Check if running on Ubuntu
  if [[ "$(uname -a)" == *Ubuntu* ]]; then
    # Check if batcat is installed (Ubuntu's bat package name)
    if command -v batcat > /dev/null; then
      alias bat='batcat'
      # Only alias cat to rcat if rcat is not already an existing command
      if ! command -v rcat > /dev/null; then
        alias rcat='cat'
      fi
      alias cat='rcat'
    fi
  else
    # Check if bat is installed on non-Ubuntu systems
    if ! command -v bat > /dev/null; then
      echo "bat/batcat is not installed. Skipping integrations."
      return
    fi
  fi

  # Integration with fzf for preview
  if command -v fzf > /dev/null; then
    export FZF_DEFAULT_OPTS="--preview 'bat --color=always --style=numbers --line-range=:500 {}'"
  fi

  # Integration with find or fd for previewing files
  alias findbat='find . -type f -exec bat {} +'
  alias fdbat='fd . -X bat'

  # Integration with ripgrep using batgrep
  alias batgrep='function _batgrep(){ rg --color=always "$1" | bat --paging=never -l diff; }; _batgrep'

  # Integration with tail -f for continuous monitoring
  alias tailbat='tail -f | bat --paging=never -l log'

  # Integration with git for showing files with syntax highlighting
  alias gitbat='git show | bat -l'

  # Git diff with bat
  batdiff() {
      git diff --name-only --relative --diff-filter=d | xargs bat --diff
  }

  # Integration with xclip for copying contents without line numbers or Git markers
  alias batclip='bat --plain | xclip'

  # Set bat as MANPAGER for colorized man pages
  export MANPAGER="sh -c 'col -bx | bat -l man -p'"
  # Check for MANROFFOPT for better formatting
  export MANROFFOPT="-c"

  # Format and print code with bat using prettybat (pseudo-code as prettybat needs to be implemented)
  alias prettybat='function _prettybat(){ <your-code-formatter> "$@" | bat; }; _prettybat'

  # Alias for highlighting --help messages
  alias bathelp='bat --plain --language=help'
  help() {
      "$@" --help 2>&1 | bathelp
  }
  # For zsh, override -h and --help entirely
  alias -g -- -h='-h 2>&1 | bat --language=help --style=plain'
  alias -g -- --help='--help 2>&1 | bat --language=help --style=plain'
  bat cache --build > /dev/null 2>&1
  # Ensure extended globbing is enabled
  setopt extended_glob
  # Define the directory and the base command
  local INSTALL_DIR="${HOME}/.local"
  local BASE_CMD="bat"
  # Define the suffixes
  local SUFFIXES=(diff grep man watch)
  # Flag to indicate if any file is missing
  local missing_file=false
  # Check each file individually
  for suffix in $SUFFIXES; do
      if [[ ! -f "${INSTALL_DIR}/bin/${BASE_CMD}${suffix}" ]]; then
          missing_file=true
          break
      fi
  done
  # If any file is missing, execute the installation steps
  if $missing_file; then
    # Clone the repository
    local CUR_DIR=$(pwd)
    cd /tmp
    git clone https://github.com/eth-p/bat-extras.git
    cd bat-extras

    # Build and install bat-extras
    ./build.sh --minify=all --install --prefix="$INSTALL_DIR"

    # Cleanup: Go back to the previous directory and remove the cloned repo
    cd ..
    rm -rf bat-extras
    cd "$CUR_DIR"
    unset CUR_DIR
    # Notify the user
    ECHOCAT "bat-extras installed successfully in $INSTALL_DIR"
  fi

  export LESSOPEN="$(which batpipe) %s"
  # The following will enable colors when using batpipe with less:
  export BATPIPE="color"

}
install_and_setup_bat
### END OF BAT BLOCK

# Neovim build from source
build_and_install_neovim
unset -f build_and_install_neovim

# LunarVIM
if ! CHECK_COMMANDS lvim; then
  bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/uninstall.sh)
  bash <(curl -s https://raw.githubusercontent.com/lunarvim/lunarvim/master/utils/installer/install.sh)
fi

if CHECK_COMMANDS lvim; then
  export EDITOR="${$(which lvim):-$EDITOR}"
  export VISUAL="${$(which lvim):-$VISUAL}"
  export PAGER="${$(which lvim):-$PAGER}"
  export MANPAGER="$(which lvim) -c 'Man!' -o -"
else
  export EDITOR="${$(which nvim):-$EDITOR}"
  export VISUAL="${$(which nvim):-$VISUAL}"
  export PAGER="${$(which nvim):-$PAGER}"
  export MANPAGER="$(which nvim) -c 'Man!' -o -"
fi
