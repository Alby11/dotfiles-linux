# vim: filetype=zsh

#
# .zeditor - Zsh file loaded to export editor, visual, pager ...
#

ECHOCAT '.zeditor - Zsh file loaded to export editor, visual, pager ...'

#
# Editors
#

# define a function to install bat and its extras
install_and_setup_bat() {

  export BATPIPE
  export MANROFFOPT

  if ! CHECK_COMMANDS bat && ! CHECK_COMMANDS batcat; then
    package_manager_install bat
  fi

  # Check if running on Ubuntu
  if [ "$DISTRO" = "ubuntu" ]; then
    # Check if batcat is installed (Ubuntu's bat package name)
    if command -v batcat > /dev/null 2>&1; then
      alias bat='batcat'
      bat () { 
        batcat "$@"
      }
      # Only alias cat to rcat if rcat is not already an existing command
      if ! command -v rcat > /dev/null 2>&1; then
        rcat () { 
          cat "$@"
        }
      fi
    fi
  fi

  # Integration with fzf for preview
  if command -v fzf > /dev/null 2>&1; then
    export FZF_DEFAULT_OPTS="--preview 'bat --color=always --style=numbers --line-range=:500 {}'"
    fzfbat() { 
      fzf --preview "bat --color=always --style=numbers --line-range=:500 {}"
    }
  fi

  # Integration with find or fd for previewing files
  alias findbat='find | xargs -exec bat {} +'
  if command -v fd-find > /dev/null 2>&1; then
    alias fd='fd-find'
    fd() {
      fd-find "$@"
    }
    fdbat() {
      fd-find "$@" | xargs -X bat
    }
  elif command -v fd > /dev/null 2>&1; then
    fdbat() {
      fd "$@" | xargs -X bat
    }
  fi

  # Integration with tail -f for continuous monitoring
  function tailbat() {
    tail -f  | xargs bat --paging=never -l log
  }

  # Integration with git for showing files with syntax highlighting
  function gitbat() {
    git show | xargs bat -l -rs
  }
  alias BGS='| bat -l rs' # mnemonic Bat Git Show

  # Integration with xclip for copying contents without line numbers or Git markers
  alias batclip='bat --plain | xclip'
  alias batwlcopy='bat --plain | wl-copy'

  # Alias for highlighting --help messages
  alias bathelp='bat --plain --language=help'

  function help() {
      "$@" --help 2>&1 | bat --plain --language=help
  }

  bat cache --build > /dev/null 2>&1

  if command -v batpipe > /dev/null 2>&1; then
    LESSOPEN="$(which batpipe) %s"
    # The following will enable colors when using batpipe with less:
    BATPIPE="color"
  fi

  # Install sublime syntaxes for bat
  if [[ ! -d ${XDG_CONFIG_HOME}/bat/syntaxes/sublime-syntax ]]; then
    git clone --depth 1 git@github.com:sublimehq/Packages.git ${XDG_CONFIG_HOME}/bat/syntaxes/Packages && \
    rm -rfv ${XDG_CONFIG_HOME}/bat/syntaxes/Packages/{.git,.github,.gitignore,LICENSE,README.md} && \
    find "${XDG_CONFIG_HOME}/bat/syntaxes/Packages" -maxdepth 2 -type f -regex '.+\w+[.]sublime-syntax' -exec \
      mv -v {} "${XDG_CONFIG_HOME}/bat/syntaxes/sublime-syntax" \; && \
    find "${XDG_CONFIG_HOME}/bat/syntaxes/Packages" -mindepth 1 -maxdepth 2 -type d -exec \
      rm -rfv {} \; && \
    for file in "DocStrip" "HTML" "JSX" "LaTeX" "PHP" "TSX" "TypeScript" "XSL"; do
      rm -rfv "${XDG_CONFIG_HOME}/bat/syntaxes/sublime-syntax/${file}.sublime-syntax"
    done && \
    mv -v ${XDG_CONFIG_HOME}/bat/syntaxes/{"Packages","sublime-syntax"} && \
    bat cache --build
  fi

  # Set bat as MANPAGER for colorized man pages
  MANPAGER="zsh -c 'col -bx | bat -l man -p'"
  # Check for MANROFFOPT for better formatting

  BATPIPE="color";
  MANROFFOPT="-c"

}

### Setting up less
# Highlight section titles in manual pages.
LESS_TERMCAP_md="${yellow}"
unset LESSCLOSE
LESS="$LESS -R"

# Bob Neovim Version Manager Setup
# Function to install Bob if not already installed
install_bob() {
  if [ ! command -v bob >/dev/null  2>&1 ]; then
    echo "Installing Bob..."
    cargo install --git https://github.com/MordechaiHadad/bob.git
  else
    # echo "Bob is already installed."
  fi
}

# Function to install the latest Neovim nightly using Bob
install_latest_neovim() {
  # echo "Installing latest Neovim..."
  bob use stable > /dev/null 2>&1 &
}

# Check if rustup is installed, required for building Bob and Neovim
if ! command -v rustup > /dev/null 2>&1; then
  echo "rustup is required for Bob and Neovim builds. Install rustup..."
  package_manager_install rustup
  # curl https://sh.rustup.rs -sSf | sh
fi

# Run the installation of Bob and Neovim nightly
install_bob
install_latest_neovim

# Add Bob's Neovim installation to PATH
# export PATH="$HOME/.local/share/bob/nvim-bin:$PATH"

install_and_setup_bat

if CHECK_COMMANDS lvim; then
  EDITOR="${$(which lvim):-$EDITOR}"
  PAGER="$EDITOR"
  MANPAGER="$EDITOR -c 'Man!' -o -"
elif CHECK_COMMANDS nvim; then
  EDITOR="${$(which nvim):-$EDITOR}"
  PAGER="$EDITOR"
  MANPAGER="$EDITOR -c 'Man!' -o -"
elif CHECK_COMMANDS vim; then
  EDITOR="${$(which vim):-$EDITOR}"
  PAGER="$EDITOR"
  MANPAGER="$EDITOR c 'Man!' -o -"
else
  EDITOR="${$(which vi):-$EDITOR}"
  PAGER="${$(which less):-$PAGER}"
  MANPAGER="$PAGER"
fi
VISUAL="$EDITOR"
 
[[ -n $EDITOR ]] && {
  edit() {
      ${EDITOR:-vi} "$@"
  }
  alias e='edit'
}

export EDITOR
export VISUAL
export PAGER
export MANPAGER
export LESS
export LESS_TERMCAP_md
export LESSOPEN
export LESSCLOSE
export PATH

# enable zsh to interpret # as comments during interactive sessions
setopt interactivecomments
